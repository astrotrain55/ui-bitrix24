import{j as e,g as _,S as i}from"./getClassName-BzrhRKf7.js";import"./index-CDs2tPxN.js";const s={sizes:["md","lg"],colors:["primary","success","warning","danger"]},r={progress:0,size:s.sizes[0],color:s.colors[0],textBefore:"",textAfter:"",bg:!1,column:!1};function c(z){const{progress:B=r.progress,size:l=r.size,color:n=r.color,textBefore:S=r.textBefore,textAfter:P=r.textAfter,bg:j=r.bg,column:N=r.column}=z,h={[`ui-progressbar-${l}`]:s.sizes.includes(l),[`ui-progressbar-${n}`]:s.colors.includes(n),"ui-progressbar-bg":j,"ui-progressbar-column":N},A=e.jsx("div",{className:"ui-progressbar-text-before",children:S}),v=e.jsx("div",{className:"ui-progressbar-text-after",children:P});return e.jsxs("div",{className:_("ui-progressbar",h),children:[A??"",e.jsx("div",{className:"ui-progressbar-track",children:e.jsx("div",{className:"ui-progressbar-bar",style:{width:`${B}%`}})}),v??""]})}c.__docgenInfo={description:"",methods:[],displayName:"BxProgressbar"};const T={title:"BxProgressbar",args:{progress:17,size:r.size,color:r.color,textBefore:r.textBefore,textAfter:r.textAfter,bg:r.bg,column:r.column},argTypes:{progress:{control:{type:"number",min:0,max:100}},size:{options:s.sizes,control:{type:"inline-radio"}},color:{options:s.colors,control:{type:"inline-radio"}},textBefore:{control:{type:"text"}},textAfter:{control:{type:"text"}},bg:{control:{type:"boolean"}},column:{control:{type:"boolean"}}}},o=i(c).bind({}),t=i(c,"size",s.sizes),a=i(c,"color",s.colors);var p,u,g;o.parameters={...o.parameters,docs:{...(p=o.parameters)==null?void 0:p.docs,source:{originalSource:"Story(BxProgressbar).bind({})",...(g=(u=o.parameters)==null?void 0:u.docs)==null?void 0:g.source}}};var m,d,x;t.parameters={...t.parameters,docs:{...(m=t.parameters)==null?void 0:m.docs,source:{originalSource:"Story<TypesPropsList>(BxProgressbar, 'size', propsValues.sizes)",...(x=(d=t.parameters)==null?void 0:d.docs)==null?void 0:x.source}}};var b,f,y;a.parameters={...a.parameters,docs:{...(b=a.parameters)==null?void 0:b.docs,source:{originalSource:"Story<TypesPropsList>(BxProgressbar, 'color', propsValues.colors)",...(y=(f=a.parameters)==null?void 0:f.docs)==null?void 0:y.source}}};const V=["Default","Sizes","Colors"];export{a as Colors,o as Default,t as Sizes,V as __namedExportsOrder,T as default};
